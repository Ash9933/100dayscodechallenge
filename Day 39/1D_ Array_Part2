Problem - Write a program in java to input an array and play game with the array,if game won return true otherwise
          vice versa.
          
Code :

import java.util.*;

public class Solution{
  public static boolean canWin(int leap,int[] game) {  
    
    int i=0;
    LinkedList<String> ll = new LinkedList<String>();
    int[][] arr=new int[game.length][3];
    
    while(true){
      if((i+leap)>=game.length || (i+1)>=game.length){
        return true;
      }
      else if(arr[i][0]==0 && (i+leap)<game.length && game[i+leap]==0){
        arr[i][0]=1;
        ll.add(i+"l");
        i=i+leap;
      }
      else if(arr[i][1]==0 && (i+1)<game.length && game[i+1]==0){
        arr[i][0]=1;
        arr[i][1]=1;
        ll.add(i+"f");
        i=i+1;
      }
      else if(arr[i][2]==0 && (i-1)>=0 && game[i-1]==0){
        arr[i][0]=1;
        arr[i][1]=1;
        arr[i][2]=1;
        ll.add(i+"b");
        i=i-1;
      }
      else{
        arr[i][0]=1;
        arr[i][1]=1;
        arr[i][2]=1;
        
        while(true){
          if(ll.size()!=0){
            String s1=ll.getLast();
            String s2=s1.substring(0,s1.length()-1);
            char c=s1.charAt(s1.length()-1);
            
            if(c=='b'){
              ll.removeLast();
            }
            else if(c=='f' || c=='l'){
              i=Integer.parseInt(s2);
              ll.removeLast();
              break;
            }
          }
          else{
            return false;
          }
        }
      }
    } 
  }

  public static void main(String[] args) {
    Scanner scan = new Scanner(System.in);
    int q = scan.nextInt();

    for(int j=0;j<q;j++) {
      int n = scan.nextInt();
      int leap = scan.nextInt();
      
      int[] game = new int[n];
      for (int i = 0; i < n; i++) {
        game[i] = scan.nextInt();
      }
      
      System.out.println(canWin(leap, game) ? "YES" : "NO");
    }

    scan.close();
  }
}


Input :

STDIN           Function
-----           --------
4               q = 4 (number of queries)
5 3             game[] size n = 5, leap = 3 (first query)
0 0 0 0 0       game = [0, 0, 0, 0, 0]
6 5             game[] size n = 6, leap = 5 (second query)
0 0 0 1 1 1     . . .
6 3
0 0 1 1 1 0
3 1
0 1 0


Output :

YES
YES
NO
NO


Explanation - The first line contains an integer,q, denoting the number of queries (i.e., function calls).
              The 2-q subsequent lines describe each query over two lines:
              The first line contains two space-separated integers describing the respective values of n and leap.
              The second line contains n space-separated binary integers (i.e., zeroes and ones) describing the respective values of
              game0,game1.......gamen-1.
              
              We perform the following q=4 queries:

               For game=[0,0,0,0,0] and leap=3 , we can walk and/or jump to the end of the array because every cell contains a 0.
               Because we can win, we return true.
               
               For game=[0,0,0,1,1,1]  and leap=5, we can walk to index 1 and then jump i+leap=1+5=6 units to the end of the array.
               Because we can win, we return true.
               
               For  game=[0,0,1,1,1,0] and leap=3, there is no way for us to get past the three consecutive ones.
               Because we cannot win, we return false.
               
               For game=[0,1,0] and leap=1, there is no way for us to get past the one at index 1. 
               Because we cannot win, we return false.
               
               
